public class BuilderPatternExample {

    public static void main(String[] args) {
        // Create a Computer with default values
        Computer computer1 = new Computer.Builder("Intel i5", "16GB").build();
        System.out.println(computer1);

        // Create a Computer with all options
        Computer computer2 = new Computer.Builder("AMD Ryzen 7", "32GB")
                .setStorage("1TB SSD")
                .setGraphicsCard(true)
                .setBluetooth(true)
                .build();
        System.out.println(computer2);

        // Create a Computer with some options
        Computer computer3 = new Computer.Builder("Intel i7", "8GB")
                .setStorage("512GB SSD")
                .setGraphicsCard(true)
                .build();
        System.out.println(computer3);
    }

    // Product class
    public static class Computer {

        private final String CPU;
        private final String RAM;
        private final String storage;
        private final boolean graphicsCard;
        private final boolean bluetooth;

        // Private constructor to be used by the Builder
        private Computer(Builder builder) {
            this.CPU = builder.CPU;
            this.RAM = builder.RAM;
            this.storage = builder.storage;
            this.graphicsCard = builder.graphicsCard;
            this.bluetooth = builder.bluetooth;
        }

        @Override
        public String toString() {
            return "Computer [CPU=" + CPU + ", RAM=" + RAM + ", Storage=" + storage 
                    + ", GraphicsCard=" + graphicsCard + ", Bluetooth=" + bluetooth + "]";
        }

        // Static nested Builder class
        public static class Builder {
            private final String CPU;  // Required
            private final String RAM;  // Required
            private String storage = "256GB SSD"; // Default value
            private boolean graphicsCard = false; // Default value
            private boolean bluetooth = false; // Default value

            // Constructor with required parameters
            public Builder(String CPU, String RAM) {
                this.CPU = CPU;
                this.RAM = RAM;
            }

            // Methods to set optional parameters
            public Builder setStorage(String storage) {
                this.storage = storage;
                return this;
            }

            public Builder setGraphicsCard(boolean graphicsCard) {
                this.graphicsCard = graphicsCard;
                return this;
            }

            public Builder setBluetooth(boolean bluetooth) {
                this.bluetooth = bluetooth;
                return this;
            }

            // Build method to create Computer instance
            public Computer build() {
                return new Computer(this);
            }
        }
    }
}