public class SingletonPatternExample {

    public static void main(String[] args) {
        // Create and test the Logger class

        // Get instances of Logger
        Logger logger1 = Logger.getInstance();
        Logger logger2 = Logger.getInstance();
        
        // Verify that both instances are the same
        if (logger1 == logger2) {
            System.out.println("Both logger1 and logger2 refer to the same instance.");
        } else {
            System.out.println("logger1 and logger2 refer to different instances.");
        }
        
        // Use the logger instance to log a message
        logger1.log("This is a test message.");
        
        // Ensure that logging works regardless of the reference
        logger2.log("Another test message.");
    }

    // Singleton Logger class
    public static class Logger {

        // Private static instance of the class
        private static Logger instance;

        // Private constructor to prevent instantiation
        private Logger() {
            // Private constructor to prevent instantiation
        }

        // Public static method to get the instance of the class
        public static Logger getInstance() {
            // Double-checked locking to ensure thread safety
            if (instance == null) {
                synchronized (Logger.class) {
                    if (instance == null) {
                        instance = new Logger();
                    }
                }
            }
            return instance;
        }

        // Example method for logging messages
        public void log(String message) {
            System.out.println("Log: " + message);
        }
    }
}